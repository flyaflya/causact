# NOTE: This workflow is overkill for most R packages
# check-standard.yaml is likely a better choice
# usethis::use_github_action("check-standard") will install it.
#
# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: windows-latest, r: '3.6'}
          - {os: ubuntu-18.04,   r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest", http-user-agent: "R/4.0.0 (ubuntu-18.04) R (4.0.0 x86_64-pc-linux-gnu x86_64 linux-gnu) on GitHub Actions" }
          - {os: ubuntu-18.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04,   r: 'oldrel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04,   r: '3.5', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04,   r: '3.4', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}

    env:
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RETICULATE_AUTOCONFIGURE: 'FALSE'
      UPGRADE_PKGS: ${{ matrix.config.r == '3.4' || matrix.config.r == '3.5'}}
      TF_VERSION: '1.14.0'

    steps:

      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        id: install-r
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages("remotes")
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), "depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ env.cache-version }}-${{ runner.os }}-r-${{ matrix.config.r }}-${{ hashFiles('depends.Rds') }}
          restore-keys: ${{ env.cache-version }}-${{ runner.os }}-r-${{ matrix.config.r }}-

      - name: Install system dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "18.04"))')
      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: install mvtnorm and mcmcpack for R < 3.6
        if: runner.os == "Linux" && ${{ env.UPGRADE_PKGS }}
        run: |
          Sys.getenv("UPGRADE_PKGS")
          if (Sys.getenv("UPGRADE_PKGS")) {
            install.packages("remotes")
            install.packages("versions")
            versions::install.dates("quantreg", "2017-03-06")
            versions::install.dates("mvtnorm", "2017-03-06")
            versions::install.dates("MCMCpack", "2017-03-06")
            packageVersion("quantreg")
            packageVersion("mvtnorm")
            packageVersion("MCMCpack")
          }
        shell: Rscript {0}

      - name: specially install fields for windows
        if: runner.os == 'Windows'
        run: |
          install.packages("fields")
          library(fields)
          packageVersion("fields")
        shell: Rscript {0}

      - name: Install Miniconda
        run: |
          install.packages(c("remotes", "keras"))
          reticulate::install_miniconda()
        shell: Rscript {0}

      - name: Set options for conda binary for macOS
        if: runner.os == 'macOS'
        run: |
          echo "options(reticulate.conda_binary = reticulate:::miniconda_conda())" >> .Rprofile
#  Perhaps here is where we can install / change the environment that we are
# installing into? Can we call our own greta install functions here?
      - name: Install TensorFlow
        run: |
          reticulate::conda_create('r-reticulate', packages = c('python==3.7'))
          remotes::install_local()
          keras::install_keras(tensorflow = Sys.getenv('TF_VERSION'), extra_packages = c('IPython', 'requests', 'certifi', 'urllib3', 'tensorflow-probability==0.7.0', 'numpy==1.16.4'))
        shell: Rscript {0}

      - name: Python + TF details
        run: |
          Rscript -e 'tensorflow::tf_config()'
          Rscript -e 'tensorflow::tf_version()'
          Rscript -e 'reticulate::py_module_available("tensorflow_probability")'
          Rscript -e 'reticulate::py_config()'
      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", '--no-multiarch'), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.config.os }}-r${{ matrix.config.r }}-results
          path: check
